{"version":3,"sources":["components/Clock.tsx","App.tsx","index.tsx"],"names":["Clock","state","date","Date","timerClockChange","this","window","setInterval","setState","clearInterval","props","clockName","toLocaleTimeString","Component","getRandomName","value","Math","random","toString","slice","App","hasClock","timerNameChange","handleClockDisappearing","PreviousState","document","addEventListener","console","log","removeEventListener","className","ReactDOM","render","getElementById"],"mappings":"oNAUaA,EAAb,4MACEC,MAAQ,CACNC,KAAM,IAAIC,MAFd,EAKEC,iBAAmB,EALrB,uDAOE,WAAqB,IAAD,OAClBC,KAAKD,iBAAmBE,OAAOC,aAAY,WACzC,EAAKC,SAAS,CAAEN,KAAM,IAAIC,SACzB,OAVP,kCAaE,WACEM,cAAcJ,KAAKD,oBAdvB,oBAiBE,WACE,IAAQF,EAASG,KAAKJ,MAAdC,KAER,OACE,qCACE,iCAASG,KAAKK,MAAMC,YACnB,YACAT,EAAKU,4BAxBd,GAA2BC,aCL3B,SAASC,IACP,IAAMC,EAAQC,KAAKC,SAASC,WAAWC,MAAM,EAAG,GAEhD,MAAM,SAAN,OAAgBJ,G,IAQZK,E,4MACJnB,MAAQ,CACNoB,UAAU,EACVV,UAAWG,K,EAGbQ,gBAAkB,E,EA0BlBC,wBAA0B,WACxB,EAAKf,UAAS,SAAAgB,GACZ,MAAO,CAAEH,UAAWG,EAAcH,c,uDA1BtC,WAAqB,IAAD,OAClBhB,KAAKiB,gBAAkBhB,OAAOC,aAAY,WACxC,EAAKC,SAAS,CAAEG,UAAWG,QAC1B,MAEHW,SAASC,iBAAiB,cAAerB,KAAKkB,yBAE9CE,SAASC,iBAAiB,QAASrB,KAAKkB,2B,gCAI1C,WAAuBC,GAAuB,eAE5CG,QAAQC,IAAR,wBAA6BJ,EAAcb,UAA3C,iBAA6DN,KAAKJ,MAAMU,UAAxE,Q,kCAGF,WACEF,cAAcJ,KAAKiB,iBAEnBG,SAASI,oBAAoB,cAAexB,KAAKkB,yBAEjDE,SAASI,oBAAoB,QAASxB,KAAKkB,2B,oBAS7C,WACE,MAAgClB,KAAKJ,MAA7BoB,EAAR,EAAQA,SAAUV,EAAlB,EAAkBA,UAElB,OACE,sBAAKmB,UAAU,MAAf,UACE,6CACA,qBAAKA,UAAU,QAAf,SACGT,GAAY,cAAC,EAAD,CAAOV,UAAWA,a,GA7CvBE,aAoDHO,ICjEfW,IAASC,OACP,cAAC,EAAD,IACAP,SAASQ,eAAe,W","file":"static/js/main.3905217d.chunk.js","sourcesContent":["import { Component } from 'react';\n\ntype State = {\n  date: Date,\n};\n\ntype Props = {\n  clockName: string,\n};\n\nexport class Clock extends Component<Props, State> {\n  state = {\n    date: new Date(),\n  };\n\n  timerClockChange = 0;\n\n  componentDidMount() {\n    this.timerClockChange = window.setInterval(() => {\n      this.setState({ date: new Date() });\n    }, 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerClockChange);\n  }\n\n  render() {\n    const { date } = this.state;\n\n    return (\n      <>\n        <strong>{this.props.clockName}</strong>\n        {' time is '}\n        {date.toLocaleTimeString()}\n      </>\n    );\n  }\n}\n","import { Component } from 'react';\nimport './App.scss';\n\nimport { Clock } from './components/Clock';\n\nfunction getRandomName(): string {\n  const value = Math.random().toString().slice(2, 6);\n\n  return `Clock-${value}`;\n}\n\ntype State = {\n  hasClock: boolean,\n  clockName: string,\n};\n\nclass App extends Component<{}, State> {\n  state = {\n    hasClock: true,\n    clockName: getRandomName(),\n  };\n\n  timerNameChange = 0;\n\n  componentDidMount() {\n    this.timerNameChange = window.setInterval(() => {\n      this.setState({ clockName: getRandomName() });\n    }, 3300);\n\n    document.addEventListener('contextmenu', this.handleClockDisappearing);\n\n    document.addEventListener('click', this.handleClockDisappearing);\n  }\n\n  // eslint-disable-next-line no-empty-pattern\n  componentDidUpdate({}, PreviousState: State) {\n    // eslint-disable-next-line no-console\n    console.log(`Renamed from <${PreviousState.clockName}> to <${this.state.clockName}>`);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerNameChange);\n\n    document.removeEventListener('contextmenu', this.handleClockDisappearing);\n\n    document.removeEventListener('click', this.handleClockDisappearing);\n  }\n\n  handleClockDisappearing = () => {\n    this.setState(PreviousState => {\n      return { hasClock: !PreviousState.hasClock };\n    });\n  };\n\n  render() {\n    const { hasClock, clockName } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1>React clock</h1>\n        <div className=\"clock\">\n          {hasClock && <Clock clockName={clockName} />}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}